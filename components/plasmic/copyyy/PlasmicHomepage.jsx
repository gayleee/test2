/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5o2LsCQduNRyZKt4FU2jpD
// Component: LqUZto8xuHKS
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5o2LsCQduNRyZKt4FU2jpD/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: LqUZto8xuHKS/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "regionDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                  (async (changedValues, allValues) => {
                    const $steps = {};
                    $steps["updateInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["input", "value"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInputValue"] != null &&
                      typeof $steps["updateInputValue"] === "object" &&
                      typeof $steps["updateInputValue"].then === "function"
                    ) {
                      $steps["updateInputValue"] = await $steps[
                        "updateInputValue"
                      ];
                    }
                  }).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],

                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};
                  $steps["postgresCreate"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "raR2Ph6euo4j4ZPgundhzk",
                            opId: "c930662a-c667-468e-b1d7-30306082d1ca",
                            userArgs: {
                              variables: [values]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresCreate"] != null &&
                    typeof $steps["postgresCreate"] === "object" &&
                    typeof $steps["postgresCreate"].then === "function"
                  ) {
                    $steps["postgresCreate"] = await $steps["postgresCreate"];
                  }
                },
                onIsSubmittingChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__x3Te
                    )}
                    label={"Name"}
                    name={"first_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__rx8Cg
                    )}
                    label={"Message"}
                    name={"message"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],

                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__fJjX)}
                    onClick={async () => {
                      const $steps = {};
                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    size={"large"}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xLylv
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </section>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form2),
              extendedOnValuesChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form2", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
                (async (changedValues, allValues) => {
                  const $steps = {};
                  $steps["updateInputValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["input", "value"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInputValue"] != null &&
                    typeof $steps["updateInputValue"] === "object" &&
                    typeof $steps["updateInputValue"].then === "function"
                  ) {
                    $steps["updateInputValue"] = await $steps[
                      "updateInputValue"
                    ];
                  }
                }).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],

              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};
                $steps["postgresCreate"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "raR2Ph6euo4j4ZPgundhzk",
                          opId: "c930662a-c667-468e-b1d7-30306082d1ca",
                          userArgs: {
                            variables: [values]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresCreate"] != null &&
                  typeof $steps["postgresCreate"] === "object" &&
                  typeof $steps["postgresCreate"].then === "function"
                ) {
                  $steps["postgresCreate"] = await $steps["postgresCreate"];
                }
              },
              onIsSubmittingChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["form2", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["form2"] = ref;
              },
              requiredMark: "optional",
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form2.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form2.isSubmitting"
                }
              ],

              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <FormWrapper
                data-plasmic-name={"form2"}
                data-plasmic-override={overrides.form2}
                {...child$Props}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pg0YP)}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__s42S5
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jR3IB
                        )}
                      >
                        {"First Name"}
                      </div>
                    }
                    name={"first_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input7),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input7", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: "Enter First Name",
                        value: generateStateValueProp($state, [
                          "input7",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input7.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input7"}
                          data-plasmic-override={overrides.input7}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__nRiW
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bYoZq
                        )}
                      >
                        {"Last Name"}
                      </div>
                    }
                    name={"last_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input2),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: "Enter Last Name",
                        value: generateStateValueProp($state, [
                          "input2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input2.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fwe4K)}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__gFdrr
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sPj0G
                        )}
                      >
                        {"Email Address"}
                      </div>
                    }
                    name={"email"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input4),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: "Enter Email Address",
                        value: generateStateValueProp($state, [
                          "input4",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input4.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input4"}
                          data-plasmic-override={overrides.input4}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___6JtMj
                    )}
                    initialValue={"+63"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___14CzD
                        )}
                      >
                        {"Phone Number"}
                      </div>
                    }
                    name={"phone_number"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input5),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input5", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: ``,
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "input5",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input5.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input5"}
                          data-plasmic-override={overrides.input5}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nsQxg)}
                >
                  <DataFetcher
                    data-plasmic-name={"regionFetcher"}
                    data-plasmic-override={overrides.regionFetcher}
                    className={classNames("__wab_instance", sty.regionFetcher)}
                    dataName={"fetchedData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yj1GC
                            )}
                          >
                            {"Error fetching data"}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    errorName={"fetchError"}
                    loadingDisplay={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fQqsU
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    method={"GET"}
                    noLayout={false}
                    url={"https://psgc.gitlab.io/api/regions/"}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <FormItemWrapper
                          data-plasmic-name={"regionField"}
                          data-plasmic-override={overrides.regionField}
                          className={classNames(
                            "__wab_instance",
                            sty.regionField
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pvUEy
                              )}
                            >
                              {"Region"}
                            </div>
                          }
                          name={"region"}
                        >
                          <AntdSelect
                            data-plasmic-name={"regionDropdown"}
                            data-plasmic-override={overrides.regionDropdown}
                            className={classNames(
                              "__wab_instance",
                              sty.regionDropdown
                            )}
                            defaultOpen={false}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "regionDropdown",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={[
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              }
                            ]}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__buLue
                                )}
                              >
                                {"Select..."}
                              </div>
                            }
                            popupScopeClassName={sty["regionDropdown__popup"]}
                            useChildren={(() => {
                              try {
                                return $ctx.fetchedData;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()}
                            value={generateStateValueProp($state, [
                              "regionDropdown",
                              "value"
                            ])}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.fetchedData;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <AntdOption
                                  data-plasmic-name={"regionOptions"}
                                  data-plasmic-override={
                                    overrides.regionOptions
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.regionOptions
                                  )}
                                  key={currentIndex}
                                  value={(() => {
                                    try {
                                      return `${currentItem.name} (${currentItem.regionName})`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__e9Syb
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return `${currentItem.name} (${currentItem.regionName})`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Option";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdOption>
                              );
                            })}
                          </AntdSelect>
                        </FormItemWrapper>
                      )}
                    </DataCtxReader__>
                  </DataFetcher>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___84Cvn
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4AZuY
                        )}
                      >
                        {"Company Name"}
                      </div>
                    }
                    name={"company_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input6),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input6", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input6",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input6.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input6"}
                          data-plasmic-override={overrides.input6}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rfMAa)}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__pEyD
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zEvnd
                        )}
                      >
                        {"Sector"}
                      </div>
                    }
                    name={"sector"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" },
                          { type: "option", value: null, label: null }
                        ];

                        __composite["0"]["value"] = "Residential";
                        __composite["0"]["label"] = "Residential";
                        __composite["1"]["value"] = "Commercial";
                        __composite["1"]["label"] = "Commercial";
                        __composite["2"]["value"] = "Industrial";
                        __composite["2"]["label"] = "Industrial";
                        return __composite;
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qi8Lt
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__hnWiB
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bc5RB
                        )}
                      >
                        {"Industry"}
                      </div>
                    }
                    name={"industry"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" }
                        ];

                        __composite["0"]["value"] = "Fishing";
                        __composite["0"]["label"] = "Fishing";
                        __composite["1"]["value"] = "Utilities";
                        __composite["1"]["label"] = "Utilities";
                        return __composite;
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ms0th
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      popupScopeClassName={sty["select2__popup"]}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4UUzc)}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__bKud
                    )}
                    initialValue={"\u20b10.00"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g28ZI
                        )}
                      >
                        {"Monthly Bill"}
                      </div>
                    }
                    name={"monthly_bill"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input3),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__cavgS
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fjRD
                        )}
                      >
                        {"Message"}
                      </div>
                    }
                    name={"message"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.textArea2),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea2", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: "Enter message here",
                        value: generateStateValueProp($state, [
                          "textArea2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea2.value"
                          }
                        ],

                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea2"}
                          data-plasmic-override={overrides.textArea2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                </Stack__>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__sb6Yz)}
                  onClick={async () => {
                    const $steps = {};
                    $steps["refreshData"] = true
                      ? (() => {
                          const actionArgs = {
                            queryInvalidation: ["plasmic_refresh_all"]
                          };
                          return (async ({ queryInvalidation }) => {
                            if (!queryInvalidation) {
                              return;
                            }
                            await plasmicInvalidate(queryInvalidation);
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["refreshData"] != null &&
                      typeof $steps["refreshData"] === "object" &&
                      typeof $steps["refreshData"].then === "function"
                    ) {
                      $steps["refreshData"] = await $steps["refreshData"];
                    }
                  }}
                  size={"large"}
                  submitsForm={true}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Ark
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Submit"}
                      </span>
                    </React.Fragment>
                  </div>
                </AntdButton>
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "form",
    "input",
    "textArea",
    "form2",
    "input7",
    "input2",
    "input4",
    "input5",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "input6",
    "select",
    "select2",
    "input3",
    "textArea2"
  ],

  section: ["section", "form", "input", "textArea"],
  form: ["form", "input", "textArea"],
  input: ["input"],
  textArea: ["textArea"],
  form2: [
    "form2",
    "input7",
    "input2",
    "input4",
    "input5",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "input6",
    "select",
    "select2",
    "input3",
    "textArea2"
  ],

  input7: ["input7"],
  input2: ["input2"],
  input4: ["input4"],
  input5: ["input5"],
  regionFetcher: [
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions"
  ],

  regionField: ["regionField", "regionDropdown", "regionOptions"],
  regionDropdown: ["regionDropdown", "regionOptions"],
  regionOptions: ["regionOptions"],
  input6: ["input6"],
  select: ["select"],
  select2: ["select2"],
  input3: ["input3"],
  textArea2: ["textArea2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    form2: makeNodeComponent("form2"),
    input7: makeNodeComponent("input7"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    regionFetcher: makeNodeComponent("regionFetcher"),
    regionField: makeNodeComponent("regionField"),
    regionDropdown: makeNodeComponent("regionDropdown"),
    regionOptions: makeNodeComponent("regionOptions"),
    input6: makeNodeComponent("input6"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    input3: makeNodeComponent("input3"),
    textArea2: makeNodeComponent("textArea2"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
