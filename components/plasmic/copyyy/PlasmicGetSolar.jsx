/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5o2LsCQduNRyZKt4FU2jpD
// Component: qQqmqTm0QLAu
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantswSp81W76DfW } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wSP81w76Df-W/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5o2LsCQduNRyZKt4FU2jpD/projectcss
import sty from "./PlasmicGetSolar.module.css"; // plasmic-import: qQqmqTm0QLAu/css
import GeoAltFill1SvgIcon from "./icons/PlasmicIcon__GeoAltFill1Svg"; // plasmic-import: EOInB61c1KuQ/icon
import EnvelopeFill1SvgIcon from "./icons/PlasmicIcon__EnvelopeFill1Svg"; // plasmic-import: zRfb8olH04fc/icon
import Linkedin2SvgIcon from "./icons/PlasmicIcon__Linkedin2Svg"; // plasmic-import: mrSKxjoTsU1-/icon
import Facebook2SvgIcon from "./icons/PlasmicIcon__Facebook2Svg"; // plasmic-import: LzVCrkWzhpL_/icon
import ArrowUpRightCircleFill2SvgIcon from "./icons/PlasmicIcon__ArrowUpRightCircleFill2Svg"; // plasmic-import: yFJNkmH2O-Ws/icon

createPlasmicElementProxy;

export const PlasmicGetSolar__VariantProps = new Array();

export const PlasmicGetSolar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGetSolar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "regionDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswSp81W76DfW()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"getSolarPage"}
          data-plasmic-override={overrides.getSolarPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.getSolarPage
          )}
        >
          <div
            data-plasmic-name={"landingPage"}
            data-plasmic-override={overrides.landingPage}
            className={classNames(projectcss.all, sty.landingPage)}
          >
            <div
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              className={classNames(projectcss.all, sty.container2)}
            >
              <div
                data-plasmic-name={"heading"}
                data-plasmic-override={overrides.heading}
                className={classNames(projectcss.all, sty.heading)}
              >
                <div className={classNames(projectcss.all, sty.column__g0Ox)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g6GSq)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__pXk0B)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "223px"
                          : "317px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                    />

                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <React.Fragment>{"Got Questions?\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Reach us Today"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{"Got Questions?\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Reach us Today"}
                          </span>
                        </React.Fragment>
                      )}
                    </h1>
                  </div>
                </div>
              </div>
            </div>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  data-plasmic-name={"logo3"}
                  data-plasmic-override={overrides.logo3}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.logo3
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dwjjD)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"298px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/copyyy/images/layer2.svg",
                      fullWidth: 220.00169372558594,
                      fullHeight: 80.00094604492188,
                      aspectRatio: 2.75
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tCuqV)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  src={{
                    src: "/plasmic/copyyy/images/xLgSvg2.svg",
                    fullWidth: 24,
                    fullHeight: 25,
                    aspectRatio: 0.96
                  }}
                />
              }
              forceOpenMenu={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              itemsGap={
                hasVariant(globalVariants, "screen", "mobileOnly") ? 48 : 48
              }
              menuItems={
                <React.Fragment>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__mkxSo
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Home"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    data-plasmic-name={"solution3"}
                    data-plasmic-override={overrides.solution3}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.solution3
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Solution"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__uNc0V
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Projects"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    data-plasmic-name={"logo4"}
                    data-plasmic-override={overrides.logo4}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.logo4
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__n7UzN)}
                      displayHeight={"64px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"298px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/copyyy/images/excellVerticalLogoPng.png",
                        fullWidth: 987,
                        fullHeight: 1002,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__gMWg5
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"About"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__s0JyA
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Learn"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ishF
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Contact Us"}
                  </PlasmicLink__>
                </React.Fragment>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__knjO7)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copyyy/images/hamburgerMenuSvg.svg",
                          fullWidth: 24,
                          fullHeight: 25,
                          aspectRatio: 0.96
                        }
                      : undefined
                  }
                  width={"32"}
                />
              }
              responsiveBreakpoint={768}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(projectcss.all, sty.container)}
            id={"reach-out-section"}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              hasGap={true}
              className={classNames(projectcss.all, sty.card)}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],

                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onIsSubmittingChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  requiredMark: "optional",
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],

                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );
                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__c1Bxc)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___57Tn9
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Fb1
                            )}
                          >
                            {"First Name"}
                          </div>
                        }
                        name={"first_name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter First Name",
                            value: generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__cXmrd
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6DxHm
                            )}
                          >
                            {"Last Name"}
                          </div>
                        }
                        name={"last_name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input2),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input2", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter Last Name",
                            value: generateStateValueProp($state, [
                              "input2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uuWqi)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ug8Nn
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zwYjs
                            )}
                          >
                            {"Email Address"}
                          </div>
                        }
                        name={"email"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input4),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input4", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter Email Address",
                            value: generateStateValueProp($state, [
                              "input4",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input4.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input4"}
                              data-plasmic-override={overrides.input4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___4S877
                        )}
                        initialValue={"+63"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__if1Zf
                            )}
                          >
                            {"Phone Number"}
                          </div>
                        }
                        name={"phone_number"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input5),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input5", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: ``,
                            type: "tel",
                            value: generateStateValueProp($state, [
                              "input5",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input5.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input5"}
                              data-plasmic-override={overrides.input5}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__v1Rr)}
                    >
                      <DataFetcher
                        data-plasmic-name={"regionFetcher"}
                        data-plasmic-override={overrides.regionFetcher}
                        className={classNames(
                          "__wab_instance",
                          sty.regionFetcher
                        )}
                        dataName={"fetchedData"}
                        errorDisplay={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lh2T1
                                )}
                              >
                                {"Error fetching data"}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        errorName={"fetchError"}
                        loadingDisplay={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0EWsp
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        method={"GET"}
                        noLayout={false}
                        url={"https://psgc.gitlab.io/api/regions/"}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <FormItemWrapper
                              data-plasmic-name={"regionField"}
                              data-plasmic-override={overrides.regionField}
                              className={classNames(
                                "__wab_instance",
                                sty.regionField
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gIf1
                                  )}
                                >
                                  {"Region"}
                                </div>
                              }
                              name={"region"}
                            >
                              <AntdSelect
                                data-plasmic-name={"regionDropdown"}
                                data-plasmic-override={overrides.regionDropdown}
                                className={classNames(
                                  "__wab_instance",
                                  sty.regionDropdown
                                )}
                                defaultOpen={false}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "regionDropdown",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={[
                                  {
                                    value: "option1",
                                    label: "Option 1",
                                    type: "option"
                                  }
                                ]}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__u0Nd
                                    )}
                                  >
                                    {"Select..."}
                                  </div>
                                }
                                popupScopeClassName={
                                  sty["regionDropdown__popup"]
                                }
                                useChildren={(() => {
                                  try {
                                    return $ctx.fetchedData;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={generateStateValueProp($state, [
                                  "regionDropdown",
                                  "value"
                                ])}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $ctx.fetchedData;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <AntdOption
                                      data-plasmic-name={"regionOptions"}
                                      data-plasmic-override={
                                        overrides.regionOptions
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.regionOptions
                                      )}
                                      key={currentIndex}
                                      value={(() => {
                                        try {
                                          return `${currentItem.name} (${currentItem.regionName})`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___6RYoH
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return `${currentItem.name} (${currentItem.regionName})`;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Option";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdOption>
                                  );
                                })}
                              </AntdSelect>
                            </FormItemWrapper>
                          )}
                        </DataCtxReader__>
                      </DataFetcher>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___4NVd7
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__po2Q
                            )}
                          >
                            {"Company Name"}
                          </div>
                        }
                        name={"company_name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input6),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input6", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input6",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input6.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input6"}
                              data-plasmic-override={overrides.input6}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5Scap
                      )}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__yvTXm
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vocds
                            )}
                          >
                            {"Sector"}
                          </div>
                        }
                        name={"sector"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: "option" },
                              { value: null, label: null, type: "option" },
                              { type: "option", value: null, label: null }
                            ];

                            __composite["0"]["value"] = "Residential";
                            __composite["0"]["label"] = "Residential";
                            __composite["1"]["value"] = "Commercial";
                            __composite["1"]["label"] = "Commercial";
                            __composite["2"]["value"] = "Industrial";
                            __composite["2"]["label"] = "Industrial";
                            return __composite;
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hTp30
                              )}
                            >
                              {"Select..."}
                            </div>
                          }
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__koAig
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aolBk
                            )}
                          >
                            {"Industry"}
                          </div>
                        }
                        name={"industry"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          className={classNames("__wab_instance", sty.select2)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select2",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: "option" },
                              { value: null, label: null, type: "option" }
                            ];

                            __composite["0"]["value"] = "Fishing";
                            __composite["0"]["label"] = "Fishing";
                            __composite["1"]["value"] = "Utilities";
                            __composite["1"]["label"] = "Utilities";
                            return __composite;
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2W3Y5
                              )}
                            >
                              {"Select..."}
                            </div>
                          }
                          popupScopeClassName={sty["select2__popup"]}
                          value={generateStateValueProp($state, [
                            "select2",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rJbGk)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___62BzR
                        )}
                        initialValue={"\u20b10.00"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sWg9K
                            )}
                          >
                            {"Monthly Bill"}
                          </div>
                        }
                        name={"monthly_bill"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input3),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input3", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input3",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input3.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input3"}
                              data-plasmic-override={overrides.input3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__pRk1I
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uu9EP
                            )}
                          >
                            {"Message"}
                          </div>
                        }
                        name={"message"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter message here",
                            value: generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],

                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      size={"large"}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1YoYz
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Submit"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </Stack__>
          </Stack__>
          <footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tPtFc)}>
              <div
                data-plasmic-name={"section5"}
                data-plasmic-override={overrides.section5}
                className={classNames(projectcss.all, sty.section5)}
              >
                <div
                  data-plasmic-name={"brandLogo3"}
                  data-plasmic-override={overrides.brandLogo3}
                  className={classNames(projectcss.all, sty.brandLogo3)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vInXk)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "50%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"240px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copyyy/images/excellHorizontalLogoPng.png",
                      fullWidth: 2001,
                      fullHeight: 706,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    data-plasmic-name={"section6"}
                    data-plasmic-override={overrides.section6}
                    className={classNames(projectcss.all, sty.section6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___9P3Fu)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8K8Ij
                        )}
                      >
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Better Energy, Better Business."}
                        </h4>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__itGwh
                          )}
                        >
                          {
                            "We help businesses thrive by turning unused spaces into energy-saving assets. Our end-to-end solar solutions\u2014from expert energy assessments to premium installations and lifetime support\u2014are built for long-term value, reliability, and sustainability."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o0W8M
                          )}
                        >
                          {
                            "\u00a9 Copyright 2025 Excell Energy and Powergen Inc. All rights reserved."
                          }
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__wqwFw)}
                    >
                      <div
                        data-plasmic-name={"whereToFindUs3"}
                        data-plasmic-override={overrides.whereToFindUs3}
                        className={classNames(
                          projectcss.all,
                          sty.whereToFindUs3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wqjhz
                          )}
                        >
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__laAb7
                            )}
                          >
                            {"Where to find us?"}
                          </h5>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__s8YYx
                          )}
                        >
                          <GeoAltFill1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ys8L
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nEiv1
                            )}
                          >
                            {
                              "Unit 2618, 26th flr, High Street South Corporate Plaza Tower 1 26th St, cor 9th Ave, 1634 Taguig, Philippines"
                            }
                          </div>
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"connectWithUs4"}
                        data-plasmic-override={overrides.connectWithUs4}
                        className={classNames(
                          projectcss.all,
                          sty.connectWithUs4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aTvG
                          )}
                        >
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__rJr3I
                            )}
                          >
                            {"Connect with us!"}
                          </h5>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e0QF5
                          )}
                        >
                          <EnvelopeFill1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__su4Ps
                            )}
                            role={"img"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__rxMna
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"solutions@excell.energy"}
                          </PlasmicLink__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__elnYh
                          )}
                        >
                          <Linkedin2SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oNph0
                            )}
                            role={"img"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__o0JJd
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"Excell Energy and PowerGen Corp."}
                          </PlasmicLink__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dqo4X
                          )}
                        >
                          <Facebook2SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___9KqaR
                            )}
                            role={"img"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___355Ox
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"Excell Energy and PowerGen Corp."}
                          </PlasmicLink__>
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"getSolar3"}
                        data-plasmic-override={overrides.getSolar3}
                        className={classNames(projectcss.all, sty.getSolar3)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yRjA7
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__yjbqc
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <h5
                              className={classNames(
                                projectcss.all,
                                projectcss.h5,
                                projectcss.__wab_text,
                                sty.h5__hl7Ax
                              )}
                            >
                              {"Get Solar"}
                            </h5>
                            <ArrowUpRightCircleFill2SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lmVRa
                              )}
                              role={"img"}
                            />
                          </Stack__>
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </footer>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  getSolarPage: [
    "getSolarPage",
    "landingPage",
    "container2",
    "heading",
    "h1",
    "navigationBar",
    "logo3",
    "solution3",
    "logo4",
    "container",
    "card",
    "form",
    "input",
    "input2",
    "input4",
    "input5",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "input6",
    "select",
    "select2",
    "input3",
    "textArea",
    "button",
    "footer",
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  landingPage: [
    "landingPage",
    "container2",
    "heading",
    "h1",
    "navigationBar",
    "logo3",
    "solution3",
    "logo4"
  ],

  container2: ["container2", "heading", "h1"],
  heading: ["heading", "h1"],
  h1: ["h1"],
  navigationBar: ["navigationBar", "logo3", "solution3", "logo4"],
  logo3: ["logo3"],
  solution3: ["solution3"],
  logo4: ["logo4"],
  container: [
    "container",
    "card",
    "form",
    "input",
    "input2",
    "input4",
    "input5",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "input6",
    "select",
    "select2",
    "input3",
    "textArea",
    "button"
  ],

  card: [
    "card",
    "form",
    "input",
    "input2",
    "input4",
    "input5",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "input6",
    "select",
    "select2",
    "input3",
    "textArea",
    "button"
  ],

  form: [
    "form",
    "input",
    "input2",
    "input4",
    "input5",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "input6",
    "select",
    "select2",
    "input3",
    "textArea",
    "button"
  ],

  input: ["input"],
  input2: ["input2"],
  input4: ["input4"],
  input5: ["input5"],
  regionFetcher: [
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions"
  ],

  regionField: ["regionField", "regionDropdown", "regionOptions"],
  regionDropdown: ["regionDropdown", "regionOptions"],
  regionOptions: ["regionOptions"],
  input6: ["input6"],
  select: ["select"],
  select2: ["select2"],
  input3: ["input3"],
  textArea: ["textArea"],
  button: ["button"],
  footer: [
    "footer",
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  section5: [
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  brandLogo3: [
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  section6: ["section6", "h4", "whereToFindUs3", "connectWithUs4", "getSolar3"],
  h4: ["h4"],
  whereToFindUs3: ["whereToFindUs3"],
  connectWithUs4: ["connectWithUs4"],
  getSolar3: ["getSolar3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGetSolar__ArgProps,
          internalVariantPropNames: PlasmicGetSolar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGetSolar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "getSolarPage") {
    func.displayName = "PlasmicGetSolar";
  } else {
    func.displayName = `PlasmicGetSolar.${nodeName}`;
  }
  return func;
}

export const PlasmicGetSolar = Object.assign(
  // Top-level PlasmicGetSolar renders the root element
  makeNodeComponent("getSolarPage"),
  {
    // Helper components rendering sub-elements
    landingPage: makeNodeComponent("landingPage"),
    container2: makeNodeComponent("container2"),
    heading: makeNodeComponent("heading"),
    h1: makeNodeComponent("h1"),
    navigationBar: makeNodeComponent("navigationBar"),
    logo3: makeNodeComponent("logo3"),
    solution3: makeNodeComponent("solution3"),
    logo4: makeNodeComponent("logo4"),
    container: makeNodeComponent("container"),
    card: makeNodeComponent("card"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    regionFetcher: makeNodeComponent("regionFetcher"),
    regionField: makeNodeComponent("regionField"),
    regionDropdown: makeNodeComponent("regionDropdown"),
    regionOptions: makeNodeComponent("regionOptions"),
    input6: makeNodeComponent("input6"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    input3: makeNodeComponent("input3"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    section5: makeNodeComponent("section5"),
    brandLogo3: makeNodeComponent("brandLogo3"),
    section6: makeNodeComponent("section6"),
    h4: makeNodeComponent("h4"),
    whereToFindUs3: makeNodeComponent("whereToFindUs3"),
    connectWithUs4: makeNodeComponent("connectWithUs4"),
    getSolar3: makeNodeComponent("getSolar3"),
    // Metadata about props expected for PlasmicGetSolar
    internalVariantProps: PlasmicGetSolar__VariantProps,
    internalArgProps: PlasmicGetSolar__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGetSolar;
/* prettier-ignore-end */
